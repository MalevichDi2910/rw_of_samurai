{"version":3,"file":"static/js/61.99366ff7.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Message/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__GBJBA\",\"dialogWrap\":\"Dialogs_dialogWrap__RXHYU\",\"dialogsItems\":\"Dialogs_dialogsItems__ltyJX\",\"dialog\":\"Dialogs_dialog__pSqwA\",\"active\":\"Dialogs_active__Q6fkX\",\"messages\":\"Dialogs_messages__fEzUR\",\"message\":\"Dialogs_message__MhFTZ\",\"textareaMessage\":\"Dialogs_textareaMessage__aVrGt\",\"textarea\":\"Dialogs_textarea__4cy1Z\",\"image\":\"Dialogs_image__3pNtc\",\"addButton\":\"Dialogs_addButton__USWiD\",\"navName\":\"Dialogs_navName__yOAsO\",\"title\":\"Dialogs_title__ZQ5rC\",\"name\":\"Dialogs_name__rdKug\",\"text\":\"Dialogs_text__2EXNc\",\"textWrap\":\"Dialogs_textWrap__gI3Qz\",\"formWrapper\":\"Dialogs_formWrapper__6y1GU\",\"errorSpan\":\"Dialogs_errorSpan__b--AS\"};","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemProps = {\r\n    id: number,\r\n    name: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemProps) => {\r\n    let path = '/dialogs/' + props.id;\r\n\r\n    return <div className={s.dialog}>\r\n        <img\r\n            src=\"https://t4.ftcdn.net/jpg/04/83/90/87/360_F_483908734_Fn5m2DUij8ijZHgD95HgMLty2kOVZ7hA.png\"\r\n            alt=\"avatar\"/>\r\n        <NavLink to={path} className={s.navName}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\"\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n    name:string\r\n}\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n\r\n    return (\r\n        <>\r\n                <div className={s.message}>\r\n                    <img\r\n                        src='https://t4.ftcdn.net/jpg/04/83/90/87/360_F_483908734_Fn5m2DUij8ijZHgD95HgMLty2kOVZ7hA.png'\r\n                        alt={'logo'} className={s.image}/>\r\n\r\n                    <div className={s.textWrap}>\r\n                            <div className={s.name}>{props.name}</div>\r\n                            <div className={s.text}>{props.message}</div>\r\n                    </div>\r\n                </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Message;","import {useForm} from \"react-hook-form\";\r\nimport s from \"../Dialogs.module.css\";\r\nimport React from \"react\";\r\n\r\ntype DialogFormProps = {\r\n    newMessageBody?: string\r\n    onSubmit: (values: any) => void\r\n}\r\n\r\nexport const AddMessageForm = (props: DialogFormProps) => {\r\n\r\n    const {register, handleSubmit, formState: {errors}} = useForm();\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(props.onSubmit)}>\r\n            <div className={s.formWrapper}>\r\n                <div className={s.textarea}>\r\n                      <textarea\r\n                          {...register(\"newMessageBody\", {\r\n                              required: 'Field is required'\r\n                          })}\r\n                          placeholder={'Enter your message'}\r\n                          className={s.textareaMessage}\r\n                      />\r\n                    {errors.newMessageBody && <span className={s.errorSpan}\r\n                                                    role=\"alert\">{errors.newMessageBody.message?.toString()}</span>}\r\n                </div>\r\n                <div>\r\n                    <input className={s.addButton} type=\"submit\" value={'Send'}/>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}","import React from \"react\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport {InitialStateType} from \"../../redux/dialogs-reducer\";\r\nimport {AddMessageForm} from \"./Message/AddMessageForm\";\r\nimport {useAutoAnimate} from \"@formkit/auto-animate/react\";\r\n\r\ntype DialogsPropsType = {\r\n    dialogsPage: InitialStateType,\r\n    sendMessage: (newMessageBody: string) => void,\r\n    updateNewMessageBody: (body: string) => void\r\n    isAuth: boolean\r\n}\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n    const [dialogsRef] = useAutoAnimate<HTMLDivElement>();\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map(dialog => <DialogItem key={dialog.id} name={dialog.name} id={dialog.id}/>)\r\n    let messagesElements = state.messages.map(m => <Message key={m.id} message={m.message} name={m.name}/>)\r\n\r\n    const addNewMessage = (values: FormDataType) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogWrap}>\r\n                <span className={s.title}>Dialogs</span>\r\n                <div className={s.dialogsItems}>\r\n                    {dialogsElements}\r\n                </div>\r\n            </div>\r\n                <div ref={dialogsRef} className={s.messages}>\r\n                    {messagesElements}\r\n                    <AddMessageForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {InitialStateType,sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\n\r\ntype mapStateToPropsType = {\r\n   dialogsPage: InitialStateType\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n   sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n   return {\r\n      dialogsPage: state.dialogsPage\r\n   }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n   return {\r\n      sendMessage: (newMessageBody: string) => {\r\n         dispatch(sendMessageCreator(newMessageBody))\r\n      },\r\n   }\r\n}\r\n\r\nexport default compose<React.FC>(connect(mapStateToProps,mapDispatchToProps),withAuthRedirect)(Dialogs)"],"names":["props","path","id","_jsxs","className","s","children","_jsx","src","alt","NavLink","to","name","_Fragment","message","AddMessageForm","_errors$newMessageBod","register","handleSubmit","formState","errors","useForm","onSubmit","required","placeholder","newMessageBody","role","toString","type","value","dialogsRef","useAutoAnimate","state","dialogsPage","dialogsElements","dialogs","map","dialog","DialogItem","messagesElements","messages","m","Message","ref","values","sendMessage","compose","connect","dispatch","sendMessageCreator","withAuthRedirect","Dialogs"],"sourceRoot":""}